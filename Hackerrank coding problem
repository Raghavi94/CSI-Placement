#30 DAYS OF CODE:

DAY 2: 1)OPERATORS:

#Sample Input

12.00
20
8 

#Sample Output

15

Explanation:
Given:
meal_cost=12,tip_percent=20,tax_present=8
 Calculation:
 tip=12*(20/100)=2.4
 tax=12*(8/100)=0.96
 total cost=meal_cost+tip+task=12+2.4+0.96=15.36
 Roundoff:15


CODE:

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(meal_cost, tip_percent, tax_percent):
    m1=meal_cost*(tip_percent/100)
    m2=meal_cost*(tax_percent/100)
    s=round(meal_cost+m1+m2)
    print(int(s))

if __name__ == '__main__':
    meal_cost = float(input())

    tip_percent = int(input())

    tax_percent = int(input())

    solve(meal_cost, tip_percent, tax_percent)
----------------------------------------------------------------------------------------------------    
#Day 16: Exceptions - String to Integer

Objective:
Today, we're getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video!

Task
Read a string, S, and print its integer value; if  cannot be converted to an integer, print Bad String.

Note: You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a  score.

Input Format

A single string,S .

Constraints:

* 1<=|S|<=6, where  |S| is the length of string S .
* S is composed of either lowercase letters (a-z) or decimal digits (0-9).

Output Format:

Print the parsed integer value of S, or Bad String if S cannot be converted to an integer.

Example:
Sample input 0:
3
Sample output 0:
3

Sample input 1:
za
Sample output 1:
Bad String

CODE:

import sys
S = input().strip()
try:
    print(int(S))
except ValueError:
    print('Bad String')
---------------------------------------------------------------------------------------------------
#PYTHON STRING VALIDATORS
Task

You are given a string S .
Your task is to find out if the string S contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.

Input Format

A single line containing a string S .

Constraints
0<len(S)<1000

Output Format

In the first line, print True if S has any alphanumeric characters. Otherwise, print False.
In the second line, print True if S has any alphabetical characters. Otherwise, print False.
In the third line, print True if S  has any digits. Otherwise, print False.
In the fourth line, print True if S  has any lowercase characters. Otherwise, print False.
In the fifth line, print True if S has any uppercase characters. Otherwise, print False.

Sample Input:

qA2
Sample Output:

True
True
True
True
True

CODE:

s = input()
    print(any([char.isalnum() for char in s]))
    print(any([char.isalpha() for char in s]))
    print(any([char.isdigit() for char in s]))
    print(any([char.islower() for char in s]))
    print(any([char.isupper() for char in s]))
    
   ---------------------------------------------------------------------------------------------------
   PYTHON CODING CHALLENGE:
   SAMPLE INPUT:
   3
   4
   5
   SAMPLE OUTPUT:
   81    -->returns 3^4=81
   1     -->returns 81%5

CODE:

a=int(input())
b=int(input())
m=int(input())
print(pow(a,b))
print(pow(a,b,m))
    -------------------------------------------------------------------------------------------------
    30 DAYS OF CODE:
    DAY 4:CLASS VS INSTANCE
    
    
    Sample Input:

4
-1
10
16
18
----------------------------
Sample Output:

Age is not valid, setting age to 0.
You are young.
You are young.

You are young.
You are a teenager.

You are a teenager.
You are old.

You are old.
You are old.
------------------------------
Explanation:
---------------------------------------------------------

Test Case 0: initialAge=-1
Because initialAge<0, our code must set age to 0 and print the "Age is not valid..." message followed by the young message. Three years pass and age=3, so we print the young message again.

Test Case 1: initialAge=10
Because initialAge<13, our code should print that the person is young. Three years pass and age=13, so we print that the person is now a teenager.

Test Case 2: initialAge=16
Because 13<=initialAge<18, our code should print that the person is a teenager. Three years pass and age=19 , so we print that the person is old.

Test Case 3: initialAge=18
Because initialAge>=18 , our code should print that the person is old. Three years pass and the person is still old at age=21, so we print the old message again.

---------------------------------------------------------
CODE:

class Person:
    def __init__(self,initialAge):
        # Add some more code to run some checks on initialAge
        self.initialAge=initialAge
        if(self.initialAge<0):
            print("Age is not valid, setting age to 0.")
    def amIOld(self):
        # Do some computations in here and print out the correct statement to the console
        if(self.initialAge<13):
            print("You are young.")
        elif(self.initialAge>=13 and self.initialAge<18):
            print("You are a teenager.")
        else:
            print("You are old.")        
    def yearPasses(self):
        # Increment the age of the person in here
        self.initialAge=self.initialAge+1

t = int(input())
for i in range(0, t):
    age = int(input())         
    p = Person(age)  
    p.amIOld()
    for j in range(0, 3):
        p.yearPasses()       
    p.amIOld()
    print(" ")
    
    -------------------------------------------------------------------------------------------------

PYTHON CAPITALIZE EXERCISE:(using itertools.product())

Sample Input:

 1 2
 3 4
Sample Output:

 (1, 3) (1, 4) (2, 3) (2, 4)

 Code:

from itertools import product
a = list(map(int, input().split()))
b = list(map(int, input().split()))
print(*product(a, b))

-----------------------------------------------------------------------------------------------------

Python min and max:

Task:

You are given a 2-D array with dimensions N X M.
Your task is to perform the min function over axis 1 and then find the max of that.

Input Format:

The first line of input contains the space separated values of N  and M .
The next N  lines contains M  space separated integers.

Output Format:

Compute the min along axis 1 and then print the max of that result.

Sample Input:

4 2
2 5
3 7
1 3
4 0

Sample Output:

3

Explanation:
Min along axis 1=[2,3,1,0]
Max of [2,3,1,0]=3



CODE:

import numpy
N, M = map(int, input().split())
A = numpy.array([input().split() for _ in range(N)],int)
print(numpy.max(numpy.min(A, axis=1), axis=0))



    


