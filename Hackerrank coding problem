#30 DAYS OF CODE:

DAY 2: 1)OPERATORS:

#Sample Input

12.00
20
8 

#Sample Output

15

Explanation:
Given:
meal_cost=12,tip_percent=20,tax_present=8
 Calculation:
 tip=12*(20/100)=2.4
 tax=12*(8/100)=0.96
 total cost=meal_cost+tip+task=12+2.4+0.96=15.36
 Roundoff:15


CODE:

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(meal_cost, tip_percent, tax_percent):
    m1=meal_cost*(tip_percent/100)
    m2=meal_cost*(tax_percent/100)
    s=round(meal_cost+m1+m2)
    print(int(s))

if __name__ == '__main__':
    meal_cost = float(input())

    tip_percent = int(input())

    tax_percent = int(input())

    solve(meal_cost, tip_percent, tax_percent)
----------------------------------------------------------------------------------------------------    
#Day 16: Exceptions - String to Integer

Objective:
Today, we're getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video!

Task
Read a string, S, and print its integer value; if  cannot be converted to an integer, print Bad String.

Note: You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a  score.

Input Format

A single string,S .

Constraints:

* 1<=|S|<=6, where  |S| is the length of string S .
* S is composed of either lowercase letters (a-z) or decimal digits (0-9).

Output Format:

Print the parsed integer value of S, or Bad String if S cannot be converted to an integer.

Example:
Sample input 0:
3
Sample output 0:
3

Sample input 1:
za
Sample output 1:
Bad String

CODE:

import sys
S = input().strip()
try:
    print(int(S))
except ValueError:
    print('Bad String')
---------------------------------------------------------------------------------------------------
#PYTHON STRING VALIDATORS
Task

You are given a string S .
Your task is to find out if the string S contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.

Input Format

A single line containing a string S .

Constraints
0<len(S)<1000

Output Format

In the first line, print True if S has any alphanumeric characters. Otherwise, print False.
In the second line, print True if S has any alphabetical characters. Otherwise, print False.
In the third line, print True if S  has any digits. Otherwise, print False.
In the fourth line, print True if S  has any lowercase characters. Otherwise, print False.
In the fifth line, print True if S has any uppercase characters. Otherwise, print False.

Sample Input:

qA2
Sample Output:

True
True
True
True
True

CODE:

s = input()
    print(any([char.isalnum() for char in s]))
    print(any([char.isalpha() for char in s]))
    print(any([char.isdigit() for char in s]))
    print(any([char.islower() for char in s]))
    print(any([char.isupper() for char in s]))
    
   ---------------------------------------------------------------------------------------------------
   PYTHON CODING CHALLENGE:
   SAMPLE INPUT:
   3
   4
   5
   SAMPLE OUTPUT:
   81    -->returns 3^4=81
   1     -->returns 81%5

CODE:

a=int(input())
b=int(input())
m=int(input())
print(pow(a,b))
print(pow(a,b,m))
    -------------------------------------------------------------------------------------------------
    30 DAYS OF CODE:
    DAY 4:CLASS VS INSTANCE
    
    
    Sample Input:

4
-1
10
16
18
----------------------------
Sample Output:

Age is not valid, setting age to 0.
You are young.
You are young.

You are young.
You are a teenager.

You are a teenager.
You are old.

You are old.
You are old.
------------------------------
Explanation:
---------------------------------------------------------

Test Case 0: initialAge=-1
Because initialAge<0, our code must set age to 0 and print the "Age is not valid..." message followed by the young message. Three years pass and age=3, so we print the young message again.

Test Case 1: initialAge=10
Because initialAge<13, our code should print that the person is young. Three years pass and age=13, so we print that the person is now a teenager.

Test Case 2: initialAge=16
Because 13<=initialAge<18, our code should print that the person is a teenager. Three years pass and age=19 , so we print that the person is old.

Test Case 3: initialAge=18
Because initialAge>=18 , our code should print that the person is old. Three years pass and the person is still old at age=21, so we print the old message again.

---------------------------------------------------------
CODE:

class Person:
    def __init__(self,initialAge):
        # Add some more code to run some checks on initialAge
        self.initialAge=initialAge
        if(self.initialAge<0):
            print("Age is not valid, setting age to 0.")
    def amIOld(self):
        # Do some computations in here and print out the correct statement to the console
        if(self.initialAge<13):
            print("You are young.")
        elif(self.initialAge>=13 and self.initialAge<18):
            print("You are a teenager.")
        else:
            print("You are old.")        
    def yearPasses(self):
        # Increment the age of the person in here
        self.initialAge=self.initialAge+1

t = int(input())
for i in range(0, t):
    age = int(input())         
    p = Person(age)  
    p.amIOld()
    for j in range(0, 3):
        p.yearPasses()       
    p.amIOld()
    print(" ")
    
    -------------------------------------------------------------------------------------------------

PYTHON CAPITALIZE EXERCISE:(using itertools.product())

Sample Input:

 1 2
 3 4
Sample Output:

 (1, 3) (1, 4) (2, 3) (2, 4)

 Code:

from itertools import product
a = list(map(int, input().split()))
b = list(map(int, input().split()))
print(*product(a, b))

-----------------------------------------------------------------------------------------------------

Python min and max:

Task:

You are given a 2-D array with dimensions N X M.
Your task is to perform the min function over axis 1 and then find the max of that.

Input Format:

The first line of input contains the space separated values of N  and M .
The next N  lines contains M  space separated integers.

Output Format:

Compute the min along axis 1 and then print the max of that result.

Sample Input:

4 2
2 5
3 7
1 3
4 0

Sample Output:

3

Explanation:
Min along axis 1=[2,3,1,0]
Max of [2,3,1,0]=3



CODE:

import numpy
N, M = map(int, input().split())
A = numpy.array([input().split() for _ in range(N)],int)
print(numpy.max(numpy.min(A, axis=1), axis=0))

----------------------------------------------------------------------------------------------------

10 days of JS:(Let and Const):

To find area and circumference of circle..and first line contains radius as input

output format:

first line-->area
second line-->circumference

Sample Input 0:

2.6

Sample Output 0:

21.237166338267002
16.336281798666924

CODE:(JS)

    // Write your code here. Read input using 'readLine()' and print output using 'console.log()'.
    let r=readLine();
    const PI=Math.PI;
    
    // Print the area of the circle:
    console.log(PI*r*r);
    
    // Print the perimeter of the circle:
    console.log(2*PI*r);
    
    ----------------------------------------------------------------------------------------------
    
    Day 0: Data Types-->10 days of JS
    
    CODE:
    
    /**
*   The variables 'firstInteger', 'firstDecimal', and 'firstString' are declared for you -- do not modify them.
*   Print three lines:
*   1. The sum of 'firstInteger' and the Number representation of 'secondInteger'.
*   2. The sum of 'firstDecimal' and the Number representation of 'secondDecimal'.
*   3. The concatenation of 'firstString' and 'secondString' ('firstString' must be first).
*
*	Parameter(s):
*   secondInteger - The string representation of an integer.
*   secondDecimal - The string representation of a floating-point number.
*   secondString - A string consisting of one or more space-separated words.
**/
function performOperation(secondInteger, secondDecimal, secondString) {
    // Declare a variable named 'firstInteger' and initialize with integer value 4.
    const firstInteger = 4;
    
    // Declare a variable named 'firstDecimal' and initialize with floating-point value 4.0.
    const firstDecimal = 4.0;
    
    // Declare a variable named 'firstString' and initialize with the string "HackerRank".
    const firstString = 'HackerRank ';
    
    // Write code that uses console.log to print the sum of the 'firstInteger' and 'secondInteger' (converted to a Number        type) on a new line.
    console.log(firstInteger + (+secondInteger));
    
    // Write code that uses console.log to print the sum of 'firstDecimal' and 'secondDecimal' (converted to a Number            type) on a new line.
    console.log(firstDecimal + (+secondDecimal));
    
    
    // Write code that uses console.log to print the concatenation of 'firstString' and 'secondString' on a new line. The        variable 'firstString' must be printed first.
    console.log(firstString + secondString);
    
}


function main() {
    const secondInteger = readLine();
    const secondDecimal = readLine();
    const secondString = readLine();
    
    performOperation(secondInteger, secondDecimal, secondString);
}


--------------------------------------------------------------------------------------------------------

10 days of JS Challenge

Loops

Problem Statement:

Complete the vowelsAndConsonants function in the editor below. It has one parameter, a string,s , consisting of lowercase English alphabetic letters (i.e., a through z). The function must do the following:

First, print each vowel in s on a new line. The English vowels are a, e, i, o, and u, and each vowel must be printed in the same order as it appeared in s.
Second, print each consonant (i.e., non-vowel) in s  on a new line in the same order as it appeared in s.

Input Format:

Locked stub code in the editor reads string s  from stdin and passes it to the function.

Output Format:

First, print each vowel in s on a new line (in the same order as they appeared in s ). Second, print each consonant (i.e., non-vowel) in s on a new line (in the same order as they appeared in s ).

Sample Input 0:

javascriptloops

Sample Output 0:

a
a
i
o
o
j
v
s
c
r
p
t
l
p
s

Explanation 0:

Observe the following:

Each letter is printed on a new line.
Then the vowels are printed in the same order as they appeared in .
Then the consonants are printed in the same order as they appeared in .


CODE:

function vowelsAndConsonants(s) {
    var vowels = "aeiou";
    var consonants = "";
    for(let i=0;i<s.length;i++){
        if(vowels.includes(s[i])){
            console.log(s[i]);
        }
        else{
            consonants+=s[i]+"\n";
        }
    }
    console.log(consonants);
    
}


function main() {
    const s = readLine();
    
    vowelsAndConsonants(s);
}

-------------------------------------------------------------------------------------------------------------

10 days of JS:

DAY 5:Arrow functions:

Objective:

In this challenge, we practice using arrow functions. Check the attached tutorial for more details.

Task:

Complete the function in the editor. It has one parameter: an array,nums. It must iterate through the array performing one of the following actions on each element:

If the element is even, multiply the element by 2.
If the element is odd, multiply the element by 3 .
The function must then return the modified array.

Input Format:

The first line contains an integer, n, denoting the size of nums .
The second line contains n space-separated integers describing the respective elements of nums .

Output Format:

Return the modified array where every even element is doubled and every odd element is tripled.

Sample Input 0:

5
1 2 3 4 5

Sample Output 0:

3 4 9 8 15


CODE:

function modifyArray(nums) {
    var some = function(n){
        if(n%2==0){
            return n*2;
        }
        else{
            return n*3;
        }
    
        
    }
    var newArray=nums.map(some);
    return newArray;
    
        
    
}


function main() {
    const n = +(readLine());
    const a = readLine().split(' ').map(Number);
    
    console.log(modifyArray(a).toString().split(',').join(' '));
}

----------------------------------------------------------------------------------------------------------------

10 days of JS:

DAY-2:Switch Case:

Task:

Complete the getLetter(s) function in the editor. It has one parameter: a string, s, consisting of lowercase English alphabetic letters (i.e., a through z). It must return A, B, C, or D depending on the following criteria:

If the first character in string s is in the set {a,e,i,o,u}, then return A.
If the first character in string s is in the set {b,c,d,f,g} , then return B.
If the first character in string s is in the set ,{h,j,k,l,m} then return C.
If the first character in string s is in the set ,{n,p,q,r,s,t,v,w,x,y,z} then return D.
Hint: You can get the letter at some index i in s using the syntax s[i] or s.charAt(i).

Input Format:

Stub code in the editor reads a single string denoting s from stdin.

Output Format:

Return either A, B, C, or D according to the criteria given above.

Sample Input 0:

adfgt

Sample Output 0:

A

CODE:

function getLetter(s) {
    let letter;
       // Write your code here
    switch(true){
    case "aeiou".includes(s[0]):
    letter="A";
    break; 
    case "bcdfg".includes(s[0]):
    letter="B";
    break;
    case "hjklm".includes(s[0]):
    letter="C";
    break;
    case "npqrstvwxyz".includes(s[0]):
    letter="D";
    break;}
    
    return letter;
}


function main() {
    const s = readLine();
    
    console.log(getLetter(s));
}

-----------------------------------------------------------------------------------------------------------------------

10 days of JS:

DAY-4:COUNT OBJECTS:

Task:

Complete the function in the editor. It has one parameter: an array,a, of objects. Each object in the array has two integer properties denoted by  x and y. The function must return a count of all such objects o in array a that satisfy o.x==o.y .

Input Format:

The first line contains an integer denoting n.
Each of the n subsequent lines contains two space-separated integers describing the values of x and y.

Output Format:

Return a count of the total number of objects o such that o.x==o.y. Locked stub code in the editor prints the returned value to STDOUT.

Sample Input 0:

5
1 1
2 3
3 3
3 4
4 5
Sample Output 0:

2

Explanation 0:

There are n=5  objects in the objects array:

objects s0={x:1,y:1}
objects s1={x:2,y:3}
objects s2={x:3,y:3}
objects s3={x:3,y:4}
objects s4={x:4,y:5}

Because we have two objects o that satisfy o.x==o.y , we return 2 as our answer.

CODE:

function getCount(objects) {
    let count=0;
    for(let i=0;i<objects.length;i++){
        if(objects[i].x==objects[i].y){
            count++;
        }
    }
    return count;
}


function main() {
    const n = +(readLine());
    let objects = [];
    
    for (let i = 0; i < n; i++) {
        const [a, b] = readLine().split(' ');
        
        objects.push({x: +(a), y: +(b)});
    }
    
    console.log(getCount(objects));
}
    
    



    


