#30 DAYS OF CODE:

DAY 2: 1)OPERATORS:

#Sample Input

12.00
20
8 

#Sample Output

15

Explanation:
Given:
meal_cost=12,tip_percent=20,tax_present=8
 Calculation:
 tip=12*(20/100)=2.4
 tax=12*(8/100)=0.96
 total cost=meal_cost+tip+task=12+2.4+0.96=15.36
 Roundoff:15


CODE:

import math
import os
import random
import re
import sys

# Complete the solve function below.
def solve(meal_cost, tip_percent, tax_percent):
    m1=meal_cost*(tip_percent/100)
    m2=meal_cost*(tax_percent/100)
    s=round(meal_cost+m1+m2)
    print(int(s))

if __name__ == '__main__':
    meal_cost = float(input())

    tip_percent = int(input())

    tax_percent = int(input())

    solve(meal_cost, tip_percent, tax_percent)
----------------------------------------------------------------------------------------------------    
#Day 16: Exceptions - String to Integer

Objective:
Today, we're getting started with Exceptions by learning how to parse an integer from a string and print a custom error message. Check out the Tutorial tab for learning materials and an instructional video!

Task
Read a string, S, and print its integer value; if  cannot be converted to an integer, print Bad String.

Note: You must use the String-to-Integer and exception handling constructs built into your submission language. If you attempt to use loops/conditional statements, you will get a  score.

Input Format

A single string,S .

Constraints:

* 1<=|S|<=6, where  |S| is the length of string S .
* S is composed of either lowercase letters (a-z) or decimal digits (0-9).

Output Format:

Print the parsed integer value of S, or Bad String if S cannot be converted to an integer.

Example:
Sample input 0:
3
Sample output 0:
3

Sample input 1:
za
Sample output 1:
Bad String

CODE:

import sys
S = input().strip()
try:
    print(int(S))
except ValueError:
    print('Bad String')
---------------------------------------------------------------------------------------------------
#PYTHON STRING VALIDATORS
Task

You are given a string S .
Your task is to find out if the string S contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters.

Input Format

A single line containing a string S .

Constraints
0<len(S)<1000

Output Format

In the first line, print True if S has any alphanumeric characters. Otherwise, print False.
In the second line, print True if S has any alphabetical characters. Otherwise, print False.
In the third line, print True if S  has any digits. Otherwise, print False.
In the fourth line, print True if S  has any lowercase characters. Otherwise, print False.
In the fifth line, print True if S has any uppercase characters. Otherwise, print False.

Sample Input:

qA2
Sample Output:

True
True
True
True
True

CODE:

s = input()
    print(any([char.isalnum() for char in s]))
    print(any([char.isalpha() for char in s]))
    print(any([char.isdigit() for char in s]))
    print(any([char.islower() for char in s]))
    print(any([char.isupper() for char in s]))
    
   ---------------------------------------------------------------------------------------------------

    
    


